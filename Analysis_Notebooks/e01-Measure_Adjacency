#!/bin/zsh

source activate echobase
ipython -c "

import sys
import h5py
import scipy.io as io
import numpy as np

sys.path.append('/home/akhambhati/JagHome/hoth_research/Echobase')
import Echobase

# Load data
df = h5py.File('$1', 'r')
df_chan = io.loadmat('$2')
df_event = io.loadmat('$3')
df_lut = h5py.File('$4', 'r')
trial_id = int('$5')

# Make sure the good channel lists are correct
assert (df_chan['good_channels_jack'].shape[1] == df_chan['good_channels_ind'].shape[1])

# Retrieve data
evData = df['evData'][...]
fs = int(np.ceil(df['samp_freq'][0, 0]))
good_chan = np.array(map(int, df_chan['good_channels_ind'][0,:]-1))

# Handle electrodes 
# Keep only good channels
evData = evData[:, good_chan]
n_win, n_chan = evData.shape

# Find event in LUT
event_ind = df_lut['trial_lut'][1,:][df_lut['trial_lut'][0,:] == trial_id]
assert len(event_ind) == 1
event_ind = event_ind[0] - 1

# Get Stim Electrode Jacksheet label
stim_anode_jack = df_event['events'][0, event_ind]['stimAnode'][0,0]
stim_cathode_jack = df_event['events'][0, event_ind]['stimCathode'][0,0]
stim_anode_ix = np.flatnonzero(df_chan['good_channels_jack'][0,:] == stim_anode_jack)[0]
stim_cathode_ix = np.flatnonzero(df_chan['good_channels_jack'][0,:] == stim_cathode_jack)[0]

# Remove stim electrodes from network
all_chan_ix = np.arange(n_chan)
evData = evData[:, list(np.setdiff1d(all_chan_ix, [stim_anode_ix, stim_cathode_ix]))]

# Window the stimulation clip
win_pre_stim = list(np.arange(fs-fs/2-1, fs-1))
win_post_stim = list(np.arange(fs+fs+1, len(evData)))

# Formulate output dictionary
adj = {'Pre_Stim': {}, 'Post_Stim': {}}

try:
    # Compute Pre-Stim Adjacency
    adj['Pre_Stim']['AlphaTheta'], adj['Pre_Stim']['Beta'], adj['Pre_Stim']['LowGamma'], adj['Pre_Stim']['HighGamma'] = Echobase.Pipelines.ecog_network.multiband_conn(evData[win_pre_stim, :], fs)

    # Compute Pre-Stim Adjacency
    adj['Post_Stim']['AlphaTheta'], adj['Post_Stim']['Beta'], adj['Post_Stim']['LowGamma'], adj['Post_Stim']['HighGamma'] = Echobase.Pipelines.ecog_network.multiband_conn(evData[win_post_stim, :], fs)
except:
    adj['Pre_Stim']['AlphaTheta'] = np.nan*np.zeros((n_chan, n_chan))
    adj['Pre_Stim']['Beta'] = np.nan*np.zeros((n_chan, n_chan))
    adj['Pre_Stim']['LowGamma'] = np.nan*np.zeros((n_chan, n_chan))
    adj['Pre_Stim']['HighGamma'] = np.nan*np.zeros((n_chan, n_chan))
    adj['Post_Stim']['AlphaTheta'] = np.nan*np.zeros((n_chan, n_chan))
    adj['Post_Stim']['Beta'] = np.nan*np.zeros((n_chan, n_chan))
    adj['Post_Stim']['LowGamma'] = np.nan*np.zeros((n_chan, n_chan))
    adj['Post_Stim']['HighGamma'] = np.nan*np.zeros((n_chan, n_chan))

# Save the output
np.savez('$6', adj=adj)
"